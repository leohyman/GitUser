# Uncomment the next line to define a global platform for your project
# platform :ios, '9.0'
source 'https://github.com/CocoaPods/Specs.git'
target 'GitUserApp' do
  # Comment the next line if you don't want to use dynamic frameworks
  use_frameworks!
  inhibit_all_warnings!
  # Pods for GitUserApp
  pod 'Kingfisher'
  pod 'SnapKit'
  pod 'RxSwift'
  pod 'RxCocoa'
  pod 'Moya/RxSwift'
  pod 'ObjectMapper'
  pod 'Moya-ObjectMapper/RxSwift'
  pod 'MJRefresh'
  pod 'SVProgressHUD'

  target 'GitUserAppTests' do
    inherit! :search_paths

  end

 pod 'Moya/RxSwift'
  pod 'ObjectMapper'
  pod 'Moya-ObjectMapper/RxSwift'
  pod 'MJRefresh'
  pod 'SVProgressHUD'  
  pod 'PKHUD'





  import UIKit

@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate {
    var window: UIWindow?
    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {

        let rootViewController = YBViewController()
        let rootNav = UINavigationController(rootViewController: rootViewController)
        window = UIWindow(frame: UIScreen.main.bounds)
        window?.backgroundColor = UIColor.white
        window?.rootViewController = rootNav
        window?.makeKeyAndVisible()

        return true
    }

}



//
//  YBWebViewController.swift
//  GitUserApp
//
//  Created by Rock on 7/22/20.
//  Copyright © 2020 Rock. All rights reserved.
//
import UIKit
import WebKit
import RxCocoa

class YBWebViewController: UIViewController {

    // MARK: - Properties
    
    lazy var webView: WKWebView = {
        let view = WKWebView()
        return view
    }()
    lazy var progressView: UIProgressView = {
        let progressView = UIProgressView()
        return progressView
    }()
    var observation: NSKeyValueObservation?

    // MARK: - Life cycle
    override func viewDidLoad() {

        setupUI()
        observation = webView.observe(\.estimatedProgress, options: .new) { [weak self] (_, changed) in
            if let new = changed.newValue {
                self?.changeProgress(Float(new))
            }
        }

    }

    // MARK: - layout UI
    func setupUI() {

        view.addSubview(webView)
        view.addSubview(progressView)
        webView.snp.makeConstraints { (make) in
            make.edges.equalToSuperview()
        }

        progressView.snp.makeConstraints { (make) in
            make.top.equalToSuperview().offset(Tool.kNavigationBarHeight)
            make.left.right.equalToSuperview()
            make.height.equalTo(2)
        }
    }

    // MARK: - Action
    
    /// load URL
    /// - Parameter url: url
    func load(url: URL?) {
        if let url = url {
            webView.load(URLRequest(url: url))
        }
    }

    /// setup webView load progress
    /// - Parameter progress: progress
    private func changeProgress(_ progress: Float) {
        progressView.isHidden = progress == 1
        progressView.setProgress(progress, animated: true)
    }

}



import UIKit

struct Configs {
    struct Network {
        static let kBaseUrl = "https://api.github.com"
    }
    struct UI {
        static let kViewMargin: CGFloat = 15
    }

}

struct Tool {
   static var isFullScreen: Bool {

          if #available(iOS 11, *) {
                guard let w = UIApplication.shared.delegate?.window, let unwrapedWindow = w else {
                    return false
                }

                if unwrapedWindow.safeAreaInsets.left > 0 || unwrapedWindow.safeAreaInsets.bottom > 0 {

                    return true
                }
          }
          return false
      }

      static var kNavigationBarHeight: CGFloat {
         return isFullScreen ? 88 : 64
      }

      static var kBottomSafeHeight: CGFloat {
         return isFullScreen ? 34 : 0
      }
}



//
//  YBProgressHUD.swift
//  GitUserApp
//
//  Created by Rock on 7/22/20.
//  Copyright © 2020 Rock. All rights reserved.
//
import Foundation
import SVProgressHUD

class YBProgressHUD {
    class func initYBProgressHUD() {

        SVProgressHUD.setFont(UIFont.systemFont(ofSize: 14.0))
        SVProgressHUD.setDefaultMaskType(.none)
        SVProgressHUD.setMinimumDismissTimeInterval(1.5)

    }

    class func showSuccess(_ status: String) {
        SVProgressHUD.showSuccess(withStatus: status)
    }
    class func showError(_ status: String) {
        SVProgressHUD.showError(withStatus: status)
    }
    class func showLoading(_ status: String) {
        SVProgressHUD.show(withStatus: status)
    }
    class func showInfo(_ status: String) {
        SVProgressHUD.showInfo(withStatus: status)
    }
    class  func showProgress(_ status: String, _ progress: CGFloat) {
       SVProgressHUD.showProgress(Float(progress), status: status)
    }
    class func dismissHUD(_ delay: TimeInterval = 0) {
        SVProgressHUD.dismiss(withDelay: delay)
    }

}
//
//  MJRefresh+Rx.swift
//  GitUserApp
//
//  Created by Rock on 7/22/20.
//  Copyright © 2020 Rock. All rights reserved.
//
import Foundation
import RxSwift
import RxCocoa
import MJRefresh

extension Reactive where Base: MJRefreshComponent {

    // begin refreshing event
    var refreshing: ControlEvent<Void> {
        let source: Observable<Void> = Observable.create {
            [weak control = self.base] observer  in
            if let control = control {
                control.refreshingBlock = {
                    observer.on(.next(()))
                }
            }
            return Disposables.create()
        }
        return ControlEvent(events: source)
    }

    // end refresh event
    var loding: Binder<Bool> {
        return Binder(base) { refresh, isEnd in
            if !isEnd {
                refresh.endRefreshing()
            }
        }
    }
}

//
//  YBHomeViewModel.swift
//  GitUserApp
//
//  Created by Rock on 7/22/20.
//  Copyright © 2020 Rock. All rights reserved.
//
import Foundation
import ObjectMapper


/// GitHubUser List Model
struct GitHubUsers: Mappable {
    var totalCount: Int!
    var incompleteResults: Bool!
    var items: [GitHubUser]!

    init() {
        totalCount = 0
        incompleteResults = false
        items = []
    }

    init?(map: Map) { }

    // Mappable Protocol
    mutating func mapping(map: Map) {
        totalCount        <- map["total_count"]
        incompleteResults <- map["incomplete_results"]
        items             <- map["items"]
    }
}

/// GitHubUser Model
struct GitHubUser: Mappable {

    var avatarUrl: String!
    var login: String!
    var score: Float!
    var htmlUrl:String!

    init?(map: Map) { }

    mutating func mapping(map: Map) {
        avatarUrl <- map["avatar_url"]
        login     <- map["login"]
        score     <- map["score"]
        htmlUrl   <- map["html_url"]

    }
}
//
//  YBHomeTableViewCell.swift
//  GitUserApp
//
//  Created by Rock on 7/22/20.
//  Copyright © 2020 Rock. All rights reserved.
//
import UIKit
import Kingfisher
import SnapKit

class YBHomeTableViewCell: UITableViewCell {

    // MARK: - Properties
    lazy var avatarImageView: UIImageView = {

        let imageView = UIImageView()
        return imageView
    }()

    lazy var loginLabel: UILabel = {
        let label = UILabel()
        label.numberOfLines = 1;
        return label
    }()

    lazy var scoreLabel: UILabel = {
        let label = UILabel()
        label.numberOfLines = 1;
        return label
    }()

    lazy var urlLabel: UILabel = {
        let label = UILabel()
        label.numberOfLines = 1;
        return label
    }()

    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {
        super.init(style: style, reuseIdentifier: reuseIdentifier)
        setupUI()
    }

    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    // MARK: - layout UI
    
    func setupUI() {
        selectionStyle = .none
        contentView.addSubview(avatarImageView)
        contentView.addSubview(loginLabel)
        contentView.addSubview(scoreLabel)
        contentView.addSubview(urlLabel)

        avatarImageView.snp.makeConstraints { (make) in
            make.top.equalTo(contentView).offset(Configs.UI.kViewMargin)
            make.left.equalTo(contentView).offset(Configs.UI.kViewMargin)
            make.bottom.equalTo(contentView).offset(-Configs.UI.kViewMargin)
            make.width.equalTo(50)
            make.height.equalTo(50).priority(.high)

        }

        scoreLabel.snp.makeConstraints { (make) in
            make.top.equalTo(contentView).offset(Configs.UI.kViewMargin)
            make.right.equalTo(contentView).offset(-Configs.UI.kViewMargin)
        }

        loginLabel.snp.makeConstraints { (make) in
            make.top.equalTo(contentView).offset(Configs.UI.kViewMargin)
            make.right.equalTo(scoreLabel.snp_leftMargin).offset(-Configs.UI.kViewMargin)
            make.left
              .equalTo(avatarImageView.snp_rightMargin)
              .offset(Configs.UI.kViewMargin)
        }

        urlLabel.snp.makeConstraints { (make) in
            make.bottom.equalTo(avatarImageView.snp_bottomMargin)
            make.left
            .equalTo(avatarImageView.snp_rightMargin)
            .offset(Configs.UI.kViewMargin)
            make.right.equalToSuperview().offset(-Configs.UI.kViewMargin)

        }
    }

}
//
//  YBHomeViewController.swift
//  GitUserApp
//
//  Created by Rock on 7/22/20.
//  Copyright © 2020 Rock. All rights reserved.
//
import UIKit
import SnapKit
import RxSwift
import RxCocoa
import MJRefresh

class YBHomeViewController: UIViewController {

    // MARK: - Properties
    lazy var tableView: UITableView = {
      let tableView = UITableView()
      tableView.tableFooterView = UIView()
      tableView.estimatedRowHeight = 50
      tableView.rowHeight = UITableView.automaticDimension
      return tableView
    }()
    lazy var searchBar: UISearchBar = {
      let searchBar = UISearchBar()
      return searchBar
    }()
    let kYBHomeTableViewCellID = "YBHomeTableViewCell"
    let disposeBag = DisposeBag()
    var viewModel: YBHomeViewModel?
    let isHeaderLoading = BehaviorRelay(value: false)
    let isFooterLoading = BehaviorRelay(value: false)

    // MARK: - Life cycle
    override func viewDidLoad() {
      super.viewDidLoad()

      setupUI()
      bindViewModel()

    }

    // MARK: - bind viewModel
    
    func bindViewModel() {
        // search sequence
        let searchAction = searchBar.rx.text.orEmpty.asObservable()

        isHeaderLoading.bind(to: tableView.mj_header!.rx.loding).disposed(by: disposeBag)

        isFooterLoading.bind(to: tableView.mj_footer!.rx.loding).disposed(by: disposeBag)

        viewModel = YBHomeViewModel(disposeBag: self.disposeBag)

        viewModel?.bindAction(input: (searchAction: searchAction,
                                                        headerRefresh: self.tableView.mj_header!.rx.refreshing.asObservable(),
                                                        footerRefresh: self.tableView.mj_footer!.rx.refreshing.asObservable()))
        // bind output to tableview.mj_header and mj_footer
        viewModel?.headerLoading.asObservable().bind(to: isHeaderLoading).disposed(by: disposeBag)
        viewModel?.footerLoading.asObservable().bind(to: isFooterLoading).disposed(by: disposeBag)

        // bind tableData to tableView
        viewModel?.tableData.asDriver()
         .drive(tableView.rx.items) { [weak self] (tableView, row, element) in

            let cell = tableView.dequeueReusableCell(withIdentifier: self!.kYBHomeTableViewCellID) as! YBHomeTableViewCell
             cell.scoreLabel.text = String(element.score)
             cell.loginLabel.text = element.login
             cell.urlLabel.text = element.htmlUrl
             cell.avatarImageView.kf.setImage(with: URL(string: element.avatarUrl),placeholder: UIImage(named: "placeholder"))

             return cell
         }
         .disposed(by: disposeBag)

        // bind tableView select event
        tableView.rx
        .modelSelected(GitHubUser.self)
        .subscribe(onNext:  { [weak self] value in
            let webViewVC = YBWebViewController()
            webViewVC.load(url: URL(string: value.htmlUrl))
            self!.navigationController?.pushViewController(webViewVC, animated: true)
        })
        .disposed(by: disposeBag)
    }

    // MARK: - layout UI
    
    func setupUI() {
        self.title = "GitUserApp"
        view.addSubview(searchBar)
        view.addSubview(tableView)

        searchBar.snp.makeConstraints { (make) in
            make.top.equalTo(view).offset(Tool.kNavigationBarHeight)
            make.left.right.equalTo(view)
            make.height.equalTo(60)
        }

        tableView.snp.makeConstraints { make in
            make.top.equalTo(searchBar.snp_bottomMargin)
            make.left.right.equalTo(view)
            make.bottom.equalToSuperview().offset(-Tool.kBottomSafeHeight)
        }

        //创建一个重用的单元格
        tableView.register(YBHomeTableViewCell.self,
                               forCellReuseIdentifier: kYBHomeTableViewCellID)
        //设置头部刷新控件
        tableView.mj_header = MJRefreshNormalHeader()
        //设置尾部刷新控件
        tableView.mj_footer = MJRefreshBackNormalFooter()

        tableView.rx.willBeginDragging.subscribe { [weak self] _ in
            guard let self = self else { return }
            self.searchBar.resignFirstResponder()
        }.disposed(by: disposeBag)

    }

}

//
//  ViewModel.swift
//  GitUserApp
//
//  Created by Rock on 7/23/20.
//  Copyright © 2020 Rock. All rights reserved.
//
import Foundation
import RxSwift
import RxCocoa
import Moya_ObjectMapper

class YBHomeViewModel : NSObject{
    // request data page
    var page = 1
    // tableData for tableView
    let tableData = BehaviorRelay<[GitHubUser]>(value: [])
    //  memory collection
    let disposeBag : DisposeBag
    // search content. default value is Swift
    let keyword = BehaviorRelay(value: "Swift")

    let headerLoading = ActivityIndicator()
    let footerLoading = ActivityIndicator()

    init (disposeBag:DisposeBag) {
        self.disposeBag = disposeBag
    }

    /// transform singnal
    /// - Parameter input: (searchAction, heaserRefresh, footerRefresh)
    func bindAction(input:(searchAction: Observable<String>,
                          headerRefresh: Observable<Void>,
                          footerRefresh: Observable<Void> )){

        // search result sequence
        input.searchAction
           .filter { !$0.isEmpty }
           .flatMapLatest({ [weak self] keyword -> Observable<GitHubUsers> in
                guard let self = self else { return Observable.empty() }
                self.page = 1
                return self.request(login: keyword, page: self.page)
           }).subscribe(onNext: { [weak self] (gitHubUsers) in
                guard let self = self else { return }
                self.tableData.accept(gitHubUsers.items)
           }, onError: { (error) in
                YBProgressHUD.showError(error.localizedDescription)

        }).disposed(by: disposeBag)

        // bind search content to keyword
        input.searchAction
            .filter { !$0.isEmpty }
            .distinctUntilChanged()
            .asObservable()
            .bind(to: keyword).disposed(by: disposeBag)

       // headerRefresh result sequence
       input.headerRefresh
        .startWith(()) // when app launched start once
           .flatMapLatest({ [weak self] _ -> Observable<GitHubUsers> in
                guard let self = self else { return Observable.empty() }
                self.page = 1
                return self.request(login: self.keyword.value, page: self.page).trackActivity(self.headerLoading)

        }).subscribe(onNext: { [weak self] (gitHubUsers) in
                guard let self = self else { return }
                self.tableData.accept(gitHubUsers.items)
           }, onError: { (error) in

                YBProgressHUD.showError(error.localizedDescription)

        }).disposed(by: disposeBag)

       // footerRefresh result sequence
       input.footerRefresh
           .flatMapLatest({ [weak self] _ -> Observable<GitHubUsers> in
                guard let self = self else { return Observable.empty() }
                self.page += 1
            return self.request(login: self.keyword.value, page: self.page).trackActivity(self.footerLoading)
           }).subscribe(onNext: { [weak self] (gitHubUsers) in
                   guard let self = self else { return }
                   self.tableData.accept(self.tableData.value + gitHubUsers.items )
              }, onError: { (error) in
                   YBProgressHUD.showError(error.localizedDescription)

           }).disposed(by: disposeBag)

    }

    func request(login: String, page: Int) -> Observable<GitHubUsers> {
        return gitHubProvider.rx.request(.gitHubUsers(login: login, page: page))
            .filterSuccessfulStatusCodes()
            .mapObject(GitHubUsers.self)
            .asObservable()

    }

}


//
//  API.swift
//  GitUserApp
//
//  Created by Rock on 7/22/20.
//  Copyright © 2020 Rock. All rights reserved.
//
import Foundation
import Moya

/// API
public enum GitHubAPI {
    case gitHubUsers(login: String, page: Int)
}


/// Moya Provider
let gitHubProvider = MoyaProvider<GitHubAPI>()

/// configure API
extension GitHubAPI: TargetType {

    public var baseURL: URL {
        return URL(string: Configs.Network.kBaseUrl)!
    }

    public var path: String {

        switch self {

        /// api : search users
        case .gitHubUsers(_, _):
            return "/search/users"
        }
    }

    public var method: Moya.Method {

        switch self {
        case .gitHubUsers(_, _):
            return .get
        }
    }

    public var task: Task {

        switch self {

        /// task : search users
        case .gitHubUsers(let login, let page):
            var params: [String: Any] = [:]
            params["q"] = login
            params["page"] = String(page)
            return .requestParameters(parameters: params,
                                      encoding: URLEncoding.default)

        }
    }

    /// Alamofire validate
    public var validate: Bool {
        return false
    }

    public var sampleData: Data {
        return "{}".data(using: String.Encoding.utf8)!
    }

    public var headers: [String: String]? {
        return nil
    }
}